name: Deploy Backend to Server - Simple

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Cloudflare CLI
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create SSH config for Cloudflare access
          cat > ~/.ssh/config << EOF
          Host production-server
            HostName vps-71.fds-1.com
            User ec2-user
            ProxyCommand cloudflared access ssh --hostname %h
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            PasswordAuthentication yes
          EOF
          
          chmod 600 ~/.ssh/config

      - name: Deploy Backend
        env:
          SSH_PASSWORD: ${{ secrets.thakii_ssh_password }}
        run: |
          echo "🚀 Starting backend deployment..."
          
          # Install sshpass for password authentication
          sudo apt-get update -qq && sudo apt-get install -y sshpass
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "📍 Connected to: $(hostname)"
          echo "🛑 Stopping services..."
          pkill -f 'python3 app.py' || true
          sleep 5
          
          echo "📥 Updating code..."
          cd thakii-backend-api
          git pull origin main
          
          echo "🔧 Fixing Nginx with CORRECT path routing for both services..."
          sudo tee /etc/nginx/sites-available/thakii-backend.conf > /dev/null << 'NGINXCONF'
server {
    listen 80;
    listen 443 ssl http2;
    server_name thakii-02.fanusdigital.site vps-71.fds-1.com;
    
    # SSL configuration
    ssl_certificate /etc/ssl/certs/thakii.crt;
    ssl_certificate_key /etc/ssl/private/thakii.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    
    # Set maximum upload size to 100GB
    client_max_body_size 100G;
    
    # Worker Service Routes (CRITICAL - DO NOT REMOVE)
    location /thakii-worker/ {
        rewrite ^/thakii-worker/(.*) /$1 break;
        proxy_pass http://127.0.0.1:9000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 300s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
        proxy_request_buffering off;
        proxy_buffering off;
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Backend Service Routes (CRITICAL - FRONTEND EXPECTS /thakii-be/)
    location /thakii-be/ {
        rewrite ^/thakii-be/(.*) /$1 break;
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 300s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
        proxy_request_buffering off;
        proxy_buffering off;
        # Let Flask handle CORS headers
    }
    
    # Default route to backend (for backward compatibility)
    location / {
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 300s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
        proxy_request_buffering off;
        proxy_buffering off;
    }

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}
NGINXCONF
          
          sudo nginx -t && sudo systemctl reload nginx
          
          echo "🐍 Setting up Python..."
          if [ ! -d "venv" ]; then
              python3 -m venv venv
          fi
          source venv/bin/activate
          pip install -r requirements.txt
          
          echo "🔧 Configuring Flask..."
          cat > .env << 'FLASKCONF'
FLASK_ENV=production
PORT=5001
AWS_DEFAULT_REGION=us-east-2
S3_BUCKET_NAME=thakii-video-storage-1753883631
GOOGLE_CLOUD_PROJECT=thakii-973e3
FIREBASE_PROJECT_ID=thakii-973e3
ALLOWED_ORIGINS=https://thakii-frontend.netlify.app
FLASKCONF
          
          echo "🚀 Starting backend..."
          sudo lsof -ti:5001 | xargs sudo kill -9 2>/dev/null || true
          sleep 3
          
          source venv/bin/activate
          export $(cat .env | grep -v '^#' | xargs)
          mkdir -p logs
          nohup python3 app.py > logs/deploy.log 2>&1 &
          echo $! > backend.pid
          
          sleep 15
          
          echo "🧪 Testing..."
          curl -s http://127.0.0.1:5001/health
          curl -s https://thakii-02.fanusdigital.site/health
          
          echo "✅ Deployment complete!"
EOF
          
          # Execute deployment
          chmod +x deploy.sh
          # Deploy using SSH with password authentication
          echo "🔐 Deploying to production server..."
          
          # Execute deployment via SSH
          echo "🔐 Connecting to production server..."
          sshpass -p "$SSH_PASSWORD" ssh -o ProxyCommand="cloudflared access ssh --hostname %h" -o StrictHostKeyChecking=no ec2-user@vps-71.fds-1.com "
          cd thakii-backend-api && 
          git pull origin main && 
          source venv/bin/activate && 
          pip install -r requirements.txt && 
          sudo systemctl restart thakii-backend.service && 
          echo '✅ Backend updated and restarted'
          "

      - name: Test Deployment
        run: |
          echo "🧪 Testing deployment..."
          
          # Test health
          HEALTH=$(curl -s https://thakii-02.fanusdigital.site/health)
          echo "Health: $HEALTH"
          
          # Test CORS
          curl -s -H "Origin: https://thakii-frontend.netlify.app" -X OPTIONS https://thakii-02.fanusdigital.site/health -v 2>&1 | grep -i access-control
          
          echo "✅ Deployment test complete!"
